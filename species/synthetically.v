Require Import UniMath.Foundations.All.

Axiom Derivative :
  ‚àè X : UU,
  ‚àë d : UU ‚Üí UU,
      (* Linearity *)
      (‚àè x y : UU, (d x) ‚®ø (d y) = d (x ‚®ø y)) 
      √ó  (‚àè x y : UU, x √ó (d y) -> d (x √ó y)) 
      (* Losing's allowed *)                              
      √ó  (‚àè x : UU, ‚àÖ -> d x)
      (* Winning's allowed *)
      √ó  (unit -> d X) 
      (* Liebniz rule applies *)
      √ó (‚àè x y : UU, ((x √ó (d y)) ‚®ø ((d x) √ó y)) -> d (x √ó y))
      (* Introduction rule *)
      √ó ‚àè Y : UU, X -> (d Y -> Y).

Notation D_ X := (Derivative X) .
Definition d_ (X : UU) := pr1 (D_ X).
Definition derive (X : UU) : ‚àè Y : UU, X -> (d_ X Y -> Y).
  exact (pr2 (pr2 (pr2 (pr2 (pr2 (pr2 (D_ X))))))).
Defined. 
Definition derive_using {X Y : UU} (x : X) : (d_ X Y) -> Y.
  exact ((derive X Y) x).
Defined.

Definition win_game (X : UU) : (unit -> (d_ X X)).
  exact (pr1 (pr2 (pr2 (pr2 (pr2 (D_ X)))))).
Defined.
(* A roundabout proof of something familiar *)
Definition win_with {X : UU} (x : X) : (unit -> (X)).
  intro t.
  apply (derive_using x).
  apply (win_game X).
  exact t.
Defined.

Lemma x_to_dx {X : UU} (x : X) : (d_ X) X.
  apply (win_game X).
  exact tt.
Defined.

Definition lose {X Y : UU} : (‚àÖ -> (d_ X) Y). 
  exact fromempty.
Defined.

Definition losing_strategy {X : UU} (x : X) : X.
  apply (derive_using x).
  apply lose.
  Abort.

(*********************************************Calc Rules *************)

(* Liebniz *)
Definition liebniz {X : UU} : ‚àè x y : UU, ((x √ó (d_ X y)) ‚®ø ((d_ X x) √ó y)) -> d_ X (x √ó y).
  exact (pr1 (pr2 (pr2 (pr2 (pr2 (pr2 (D_ X))))))).
Defined.

Definition sumrule {X : UU} : ‚àè x y : UU, d_ X x ‚®ø d_ X y = d_ X (x ‚®ø y).
  exact (pr1 (pr2 (D_ X))).
Defined.
Definition scalarrule {X : UU} : ‚àè x y : UU, x √ó d_ X y -> d_ X (x √ó y).
  exact (pr1 (pr2 (pr2 (D_ X)))).
Defined.

Example scalarexample {X Y : UU} (x : X) (y : Y) : X √ó Y.
  apply (derive_using y).
  apply (scalarrule).
  split.
- assumption.
- apply (win_game Y).
  exact tt.
Defined.

Example sumexample {X Y : UU} (x : X) (y : Y) : X ‚®ø Y.
apply (derive_using x).
rewrite <- sumrule.
left. apply (win_game X).
exact tt.
Defined.

Example sameexample_differentstrategy {X Y : UU} (x : X) (y : Y) : X ‚®ø Y.
apply (derive_using x).
rewrite <- sumrule.
right.
apply lose.
Abort.

Example liebniz_example {X Y : UU} (x : X) (y : Y) : X √ó Y.
apply (derive_using x).
apply liebniz.
right.
split.
apply (win_game X); exact tt.
exact y.
Defined.
(* You have to imagine the linear types here, I don't yet know how in coq*)
Example better_liebniz_example {X Y : UU} (x0 x1 : X) : X √ó X.
apply (derive_using x0).
apply liebniz.
apply (derive_using x1).
rewrite <- sumrule.
left.
apply liebniz.
right.
split; apply (win_game X); exact tt.
Defined.

Definition win {X : UU} : d_ X X.
  apply (win_game X); exact tt.
Defined.

Axiom exponentials : ‚àë exp : UU ‚Üí UU,
      ‚àè X : UU, (d_ X (exp X) = exp X)
                  √ó ‚àè Y : UU, ((exp X -> d_ X Y) -> d_ (exp X) Y).
Definition exp : UU ‚Üí UU := pr1 exponentials.
Definition exprules (X : UU) 
  := (pr2 exponentials) X.
Definition exprule1 {X : UU} : d_ X (exp X) = exp X
  := (pr1 (exprules X)).
Definition exprule2 {X Y : UU}
  := (pr2 (exprules X)) Y.

Compute exp unit.

(* again, imagine that my exp is an affine resource *) 
(* or linear in which case I cannot finish this proof*) 
Example exponentials_example {X : UU} : exp X -> X.
intro etox.
apply (derive_using etox).
apply exprule2.
intro.
apply win.
Defined.

Example exponentials_example2 {X : UU} : X -> exp X.
intro x.
apply (derive_using x).
rewrite exprule1.
apply (derive_using x).
rewrite exprule1.
apply (derive_using x).
apply (derive_using x).
rewrite exprule1.
rewrite exprule1.
(* you get the picture *)
Abort.

(* This axiom is optional but it makes the geometry better *) 
Axiom introduce_exponential: ‚àè X : UU, X -> exp X.
Definition expintro {X : UU} (x : X) : exp X.
  apply introduce_exponential.
  exact x.
Defined.


Axiom exponentialminusone : ‚àë expminusone : UU ‚Üí UU,
    ‚àè X : UU, (d_ X (expminusone X) = (expminusone X) ‚®ø unit) √ó (‚àè Y : UU, (exp X -> d_ X Y) -> d_ (expminusone X) Y).
Definition expminusone : UU ‚Üí UU := pr1 exponentialminusone.
Definition expminusonerules (X : UU) 
  := (pr2 exponentialminusone) X.
Definition expminusonerule1 {X : UU} 
  := (pr1 (expminusonerules X)).
Definition expminusonerule2 {X : UU}
  := (pr2 (expminusonerules X)).

Example minusone_example1 {X : UU} : X -> expminusone X.
  intro x.
  apply (derive_using x).
  rewrite expminusonerule1.
  left.
  apply (derive_using x).
  rewrite expminusonerule1.
  left.
  apply (derive_using x).
  rewrite expminusonerule1.
  left.
  apply (derive_using x).

  rewrite expminusonerule1.
  right.
  exact tt.
  (* you get the picture; with the additional axiom we have way more proofs.*)
Defined.




Example minusone_example2 {X : UU} : expminusone X -> (X ‚®ø unit).
intro.
apply (derive_using X0).
clear X0.
apply (expminusonerule2).
intro.
rewrite <- sumrule.
left. apply win.
Defined.


(* 

Axiom DerivativeDual :
  ‚àè X : UU,
  ‚àë d : UU ‚Üí UU,
      (* Linearity *)
      (‚àè x y : UU, (d x) ‚®ø (d y) = d (x ‚®ø y)) 
      √ó  (‚àè x y : UU, x √ó (d y) <- d (x √ó y)) 
      (* Losing's allowed *)                              
      √ó  (‚àè x : UU, ‚àÖ <- d x)
      (* Winning's allowed *)
      √ó  (unit <- d X) 
      (* Liebniz rule applies *)
      √ó (‚àè x y : UU, ((x √ó (d y)) ‚®ø ((d x) √ó y)) <- d (x √ó y))
      (* Introduction rule *)
      √ó ‚àè Y : UU, X <- (d Y -> Y).
Notation D' := DerivativeDual.
Definition d' (X : UU) : UU -> UU := pr1 (DerivativeDual X).

Definition liebniz' {X : UU} : ‚àè x y : UU, ((x √ó (d' X y)) ‚®ø ((d' X x) √ó y)) <- d' X (x √ó y).
  exact (pr1 (pr2 (pr2 (pr2 (pr2 (pr2 (D' X))))))).
Defined.

Definition sumrule' {X : UU} : ‚àè x y : UU, d' X x ‚®ø d' X y = d' X (x ‚®ø y).
  exact (pr1 (pr2 (D' X))).
Defined.
Definition scalarrule' {X : UU} : ‚àè x y : UU, x √ó d' X y <- d' X (x √ó y).
  exact (pr1 (pr2 (pr2 (D' X)))).
Defined.

Axiom Obtain: ‚àè X Y : UU, (Y -> d_ X Y) -> (Y -> (X √ó d' X Y)).  

Definition obtain {Y : UU} (X : UU) : (Y -> d_ X Y) -> (Y -> (X √ó (d' X Y))).
  apply Obtain.
Defined.

Example obtain_XY {X Y : UU} : X √ó Y -> X.
intro XY.
apply (obtain X) in XY.
induction XY as [part rest].
exact part.
intro resource.
apply liebniz.
right.
split.
apply win.
exact (pr2 resource).
Defined.

Example obtain_Lplus {X Y : UU} : X‚®øY -> X.
intro XY.
apply (obtain X) in XY.
induction XY as [part rest].
exact part.
intro resource.
rewrite <- sumrule.
left. apply win.
Defined.

Example obtain_Rplus {X Y : UU} : Y‚®øX -> X.
intro XY.
apply (obtain X) in XY.
induction XY as [part rest].
exact part.
intro resource.
rewrite <- sumrule.
right. apply win.
Defined.

Example leftside : unit ‚®ø unit. left. exact tt. Defined.
Compute (obtain_Lplus leftside).
Compute (obtain_Rplus leftside).
  


 *) 

Example XY {X Y : UU} : X -> Y -> X √ó Y.
  intros x y.
  apply (derive_using x).
  apply liebniz.
  apply (derive_using y).
  rewrite <- sumrule.
  right.
  apply liebniz.
  left.
  split.
  - apply win.
  - apply win.
Defined.
Notation "‚àÇ" := derive_using.
(* Using tactics we can simulate linear resource usage *)
Ltac Œ¥ x  := apply (‚àÇ x); clear x; try apply liebniz; try rewrite <- sumrule; try apply win.
Ltac simplify := repeat try apply liebniz; try rewrite <- sumrule; try apply win.
Ltac splitify := repeat try (simplify; split; simplify; split; simplify).
Ltac LEFT x  := apply (‚àÇ x); clear x; repeat try simplify; repeat (left; try simplify). 
Ltac SPLIT x  := apply (‚àÇ x); clear x; repeat try (apply liebniz; try rewrite <- sumrule; try split; try apply win).
Ltac win := apply win.
Ltac checkmate x := apply (win_with x); apply tt.
Example XPlusY {X Y : UU} : X -> X ‚®ø Y.
intro x.
(* wins automatically *)
(* LEFT x. *)
Œ¥ x.
left.
simplify.
Defined.
Example Xwin {X : UU} : X -> X.
intro x.
checkmate x.
Defined.

Example XTimesY {X Y : UU} : X -> Y -> X √ó Y.
intros x y. SPLIT y.
left.
split.
checkmate x.
win.
Defined.

Example XCubed {X : UU} : X -> X -> X -> X √ó X √ó X.
intros x1 x2 x3.
Œ¥ x1.
right.
split; try win.
Œ¥ x2.
left. split; try win.
Œ¥ x3.
Defined.

Example x_fourth_plus_one {X : UU} : X -> X -> X -> X -> ((X √ó X √ó X √ó X) ‚®ø unit).
intros x0 x1 x2 x3.
Œ¥ x0. 
left. simplify.
left. split.
- Œ¥ x1.
- clear x1. simplify.
  left. split.
  + Œ¥ x2.
  + clear x2.
    simplify. left. split.
    ++ Œ¥ x3.
    ++ clear x3.
       win.
Defined.

Example x_fourth_plus_one_trivial {X : UU} : unit -> ((X √ó X √ó X √ó X) ‚®ø unit).
intro tt.
Œ¥ tt.
right. win.
Defined.

(******* Trees and things ********)

Definition BinaryTypeConstructor : UU :=
  ‚àë ùî£ : UU ‚Üí UU, ‚àè ùîµ : UU, (ùî£ ùîµ) √ó (ùî£ ùîµ) -> d_ ùîµ (ùî£ ùîµ). 
Definition ùî£ : BinaryTypeConstructor -> (UU -> UU) := pr1.
Coercion ùî£ : BinaryTypeConstructor >-> Funclass.

Axiom Tree : ‚àë œï : BinaryTypeConstructor,
      (œï ‚àÖ) √ó
(‚àè X Y : UU, (X -> Y) -> (œï X -> œï Y)).
Definition tree := pr1 Tree.
Notation œï := tree.
Definition treerule1 {x : UU} := pr2 (pr1 Tree) x.
Definition treerule2 := pr1 (pr2 Tree).
Definition treerule3 {x y : UU} (f : x -> y) := pr2 (pr2 Tree) x y f.
Definition trivialize_tree (X : UU)  := (treerule3 (fromempty :‚àÖ -> X)).
Example tree_example {X : UU} : X -> X -> œï X.
intros x0 x1.
  Œ¥ x0.
  apply treerule1.
  split.
- apply (trivialize_tree X).
  exact treerule2.
- Œ¥ x1.
  apply treerule1.
  split;
    apply (trivialize_tree X);
    exact treerule2.
Defined.

Example obtain_from_exp {x : UU} : exp x -> x ‚®ø unit.
- intro exx. Œ¥ exx.
  left. apply exprule2.
  intro. win.
Defined.
Check exprule2.
Axiom obtainaxiom_unsure : ‚àè f : UU -> UU, ‚àè X Y : UU, ((d_ X (f X) -> d_ X Y) -> d_ (f X) Y).
Example obtain_from_tree {x : UU} : œï x -> x ‚®ø unit.
intro tree.
Œ¥ tree.
rewrite sumrule.
apply obtainaxiom_unsure.
intro.
simplify.
left. win.
Defined.

Example plusone : UU ‚Üí UU := Œª X, X ‚®ø unit.
Example xplusone {X : UU} : X ‚®ø unit -> X ‚®ø unit.
intro xplusone.
Œ¥ xplusone.
left.
apply obtainaxiom_unsure.
intro.
Abort. (* nothing is contradicted, but not useful here *)

Example onetimesx{X : UU} : unit √ó X -> X.
intro xone.
Œ¥ xone.
apply obtainaxiom_unsure.
intro.
win.
Defined.

Definition square : UU ‚Üí UU := Œª x, x √ó x.

Axiom winpath : ‚àè X : UU, d_ X X = unit. 
Axiom xtimesunit : ‚àè X : UU,  X √ó unit = X. 
Axiom unittimesx : ‚àè X : UU,  unit √ó X = X. 
Definition cleanup (X : UU) : X √ó unit = X := xtimesunit X.
Definition cocleanup (X : UU) : unit √ó X = X := unittimesx X.
Ltac unitize X := rewrite (winpath X).
Ltac cleanup X := try rewrite (cleanup X); try rewrite (cocleanup X).

Example squareofx {X : UU} : X -> X -> square X.
intros x0 x1.
Œ¥ x0.
Œ¥ x1.
rewrite sumrule.
unitize X.
pose proof (cleanup X).
simplify.
left.
apply liebniz.
right.
split. win. apply tt.
Defined.

Example squared_test {X : UU} : X √ó X -> X √ó X.
intro square.
apply (‚àÇ square).
win.
Defined.

Example squared_test2 {X : UU} : X √ó X -> X √ó X.
intro square.
apply (‚àÇ square).
apply obtainaxiom_unsure.
intro.
exact X0.
Defined.











  



                                                        
